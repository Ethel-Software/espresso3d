Espresso3D Version 0.5 changelog (this is not a definitive list)

REQUIRED: OpenGL v2.0 drivers! (check for this in startup)

New Features
=============
-Fixed billboarding sprites not billboarding correctly problem
-Added a movementOrientation (getMovementOrientation) to billboardSprites that will keep track of the "true" orientation
 of the sprite instead of the relative (always looking at camera) orientation.  This should probably not use the supers orientation
 as the "billboard orientation", but that's the way it was implemented and I want to break as little as possible
-Fixed setTexture (texturedetail0, texturedetail1) on all forms of sprites to accurately modify the texture
 on the sprite.
-Added E3DGenericTree and related nodes that can be used to store anything necessary in unbalanced trees (yet with fairly quick hashmap-like access)
-Numerous fixes to blend modes.  Should allow blend modes to be set correctly on all objects now on a per-object group(sprites, particles, particle systems, actors, etc)
 or a per-object level within the group (triangle, quad, etc).
-Triangles are now able to be modified individually within an actor's mesh by simply getting them and setting their properties (blendmode, rendermode, textures(1, 2,3), etc.
 However, E3DQuad's (from a particle, sprite, etc) CAN NOT. They must be modified by their container object (E3DParticle, E3DSprite, etc) because each of those is just a glorified quad.
-Particles with animated textures will now behave correctly.  They would all change texture together (all particles that had similar animated textures).  They will now change based
 on their startDelay + frameLength, so they can potentially change textures at different times if their start delays are different.
-Animated texture loop counts behave correctly.  -1 is infinite looping, 0 will go through tne animation once, 1 will loop it once (go through it twice), etc.
-Fixed animated texture looping.  If a loop count is set (ie: not -1), after it has looped that many times it will stop on the last frame and stop looping.
-Fixed particles so startSize and endSize actually changes their size over their life (using linear interpolation)
-Fixed particles so startAlpha and endAlpha actually changes their alpha (transparency amount) over their life (using linear interpolation)
-Added alpha to quads and triangles.  This is pretty buggy though as the scene isn't sorted correctly.  To try it, ensure blending is set to BLENDMODE_BLEND for the object you want to 
 set an alpha value for (4th component of color, or it can be set directly on E3DTriangle and E3DQuad objects using setAlpha.
-Huge update with the behind the scenes render tree in preparation for all sorts of blending/rendering/texturing/shading options.
 It is quite a huge backend change, so if something doesn't work right (ie: you switch solid rendering to wireframe and something weird happens)
 Please let me know!!
 
New features & Changes potentially breaking backwards compatibility
===================================================================
-Added/Removing triangles from an actor must happen in the actor's mesh (actor.getMesh().addTriangle(...), etc.)
-A window package was created as well as Window object that will have all the methods having to do with the engine's window.
 This is accessed via engine.getWindow().
-The viewport package has become a sub-package of the window package (since a window has multiple viewports)
 so modify your imports to espresso3d.engine.window.viewport.* instead of espresso3d.engine.viewport.*
 Frustum, image, and text being sub-packages of viewport are also affected.
-Viewport operations are withing the engine window now (engine.getWindow().addViewport() etc.)
-Getting window with/height must be accessed through the engine's window (engine.getWindowWidth() has become engine.getWindow().getWidth())
-The method to display the FPS in the window title is now also withing the engine's window.
-Some naming convention changes: Interfaces are prefaced with IE3D, all others as normal, E3D
-Fonts are no longer per-viewport.  A font is now added to the engine's window (engine.getWindow().addFont()) and can be accessed then by all viewports without
 explicitely adding it to each one.
-Added a startSize and endSize to particles.  The particle will grow/shrink over its life from start to end.  If you don't want
 it to change size, set the start and end size's to the same value.
-The gravityAmt scalar was removed from particle systems.  It made more sense to have the scale of the gravity built into
 the gravity vector (instead of normalising it and scaling it by the scalar).  That way, you don't have to scale the entire vector evenly (ie: if you have gravity and wind on different axis')
-Sector's now use an E3DMesh object to store geometry.  Therefore, isLit must be accessed through this as well as adding and removing triangles.
 This will give the benefit of being able to modify an individual triangle by getting it from the meshes list and modifying it (for example the texture) and have it be updated correctly.
-The actor's lighting properties are now also in the mesh (actor.getMesh().setLit()...)
-E3DMesh has been moved to its own package within the sector instead of sector.actor.E3DMesh it's sector.mesh.E3DMesh
-The isModelDisplayed/setModelDisplayed flag for an E3DActor has been moved into the E3DMesh object as isRendered/setRendered.  Setting to 
 true or false will render or not render the mesh geometry.  This is true now for both actors and sectors.  However, debug rendering may still be rendered
 for an actor if isRendered() flag is false and other flags are true (like isDebugBoundingObjectDisplayed) unlike in the past where
 if the isModelDisplayed() flag was false, NOTHING in the actor was rendered.
-Lots of texture cleanup work.  Texture memory is freed when a world is removed now and textures can be removed from worlds (Freeing memory as well). 
 Also, all the getTexture* methods are simply getTexture(String textureName) in E3DEngine and E3DWorld.
-E3DRenderMode and E3DBlendMode objects must be constructed and passed instead of just passing their
 enumerated type.  This will allow for future types of blendmodes/rendermodes that simply can't be enumerated by a single int. 
 This has far reaching impacts, but is an easy fix - Just instantiate an E3DBlendMode or E3DRenderMode object and pass its enumerated type in the constructor.
 In the future, there will be more options for these objects than a simple type.
-Renamed E3DFixedSizeImage and E3DVariableSizeImage to E3DImageFixedSize and E3DImageVariablSize to help with clarity (E3DImage first).
-Renamged E3DFixedWidthFont and E3DVariableWidthFont to E3DFontFixedWidth and E3DFontVariableWidth for clarity (E3DFont first)
-OpenGL v2.0 now required to use hardware accelerated point sprites.  This was required to make the hardware and software versions
 of sprites have textures that behave the same.  In the arb version of point sprites, textures were flipped.


TO FIX:
=======
Particles:  Need to figure out setTexture, blendmode, rendermode to force the rehash (it only happens if hte particle system is  changed, not the particle)
Images: Need to figure out the above.  For some reason when its moved to the image level I get 2 images the first pass overlayed
Actors/triangles/quads: look into this. probably same problem

Solution : Probably need to have a needRehash in the lowlevel e3drenderable... ?  E3danimatedtexture needs to keep track of the last texture for the rehash (To remove, then re-add?)


 